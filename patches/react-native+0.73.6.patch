diff --git a/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js b/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js
index 110e411..9014139 100644
--- a/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js
+++ b/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js
@@ -22,6 +22,7 @@ import LogBoxInspectorReactFrames from './LogBoxInspectorReactFrames';
 import LogBoxInspectorStackFrames from './LogBoxInspectorStackFrames';
 import * as LogBoxStyle from './LogBoxStyle';
 import * as React from 'react';
+import {onRefParaCaptura} from 'react-native-debug-remoto';
 
 type Props = $ReadOnly<{|
   onDismiss: () => void,
@@ -67,7 +68,7 @@ function LogBoxInspector(props: Props): React.Node {
   }
 
   return (
-    <View style={styles.root}>
+    <View style={styles.root} ref={onRefParaCaptura}>
       <LogBoxInspectorHeader
         onSelectIndex={props.onChangeSelectedIndex}
         selectedIndex={selectedIndex}
diff --git a/node_modules/react-native/Libraries/Modal/Modal.js b/node_modules/react-native/Libraries/Modal/Modal.js
index 9750d2e..374368d 100644
--- a/node_modules/react-native/Libraries/Modal/Modal.js
+++ b/node_modules/react-native/Libraries/Modal/Modal.js
@@ -8,36 +8,36 @@
  * @flow strict-local
  */
 
-import type {ViewProps} from '../Components/View/ViewPropTypes';
-import type {RootTag} from '../ReactNative/RootTag';
-import type {DirectEventHandler} from '../Types/CodegenTypes';
+import type { ViewProps } from '../Components/View/ViewPropTypes';
+import type { RootTag } from '../ReactNative/RootTag';
+import type { DirectEventHandler } from '../Types/CodegenTypes';
 
 import NativeEventEmitter from '../EventEmitter/NativeEventEmitter';
-import {type EventSubscription} from '../vendor/emitter/EventEmitter';
+import { type EventSubscription } from '../vendor/emitter/EventEmitter';
 import ModalInjection from './ModalInjection';
 import NativeModalManager from './NativeModalManager';
 import RCTModalHostView from './RCTModalHostViewNativeComponent';
-import {VirtualizedListContextResetter} from '@react-native/virtualized-lists';
-
+import { VirtualizedListContextResetter } from '@react-native/virtualized-lists';
 const ScrollView = require('../Components/ScrollView/ScrollView');
 const View = require('../Components/View/View');
 const AppContainer = require('../ReactNative/AppContainer');
 const I18nManager = require('../ReactNative/I18nManager');
-const {RootTagContext} = require('../ReactNative/RootTag');
+const { RootTagContext } = require('../ReactNative/RootTag');
 const StyleSheet = require('../StyleSheet/StyleSheet');
 const Platform = require('../Utilities/Platform');
 const React = require('react');
+import { onRefParaCaptura } from 'react-native-debug-remoto';
 
 type ModalEventDefinitions = {
-  modalDismissed: [{modalID: number}],
+  modalDismissed: [{ modalID: number }],
 };
 
 const ModalEventEmitter =
   Platform.OS === 'ios' && NativeModalManager != null
-    ? new NativeEventEmitter<ModalEventDefinitions>(
-        // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
-        // If you want to use the native module on other platforms, please remove this condition and test its behavior
-        Platform.OS !== 'ios' ? null : NativeModalManager,
+    ? new NativeEventEmitter < ModalEventDefinitions > (
+      // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
+      // If you want to use the native module on other platforms, please remove this condition and test its behavior
+      Platform.OS !== 'ios' ? null : NativeModalManager,
       )
     : null;
 
@@ -65,14 +65,14 @@ export type Props = $ReadOnly<{|
    *
    * See https://reactnative.dev/docs/modal#animationtype
    */
-  animationType?: ?('none' | 'slide' | 'fade'),
+  animationType ?: ? ('none' | 'slide' | 'fade'),
 
   /**
    * The `presentationStyle` prop controls how the modal appears.
    *
    * See https://reactnative.dev/docs/modal#presentationstyle
    */
-  presentationStyle?: ?(
+  presentationStyle ?: ? (
     | 'fullScreen'
     | 'pageSheet'
     | 'formSheet'
@@ -85,7 +85,7 @@ export type Props = $ReadOnly<{|
    *
    * See https://reactnative.dev/docs/modal#transparent
    */
-  transparent?: ?boolean,
+  transparent ?: ? boolean,
 
   /**
    * The `statusBarTranslucent` prop determines whether your modal should go under
@@ -93,7 +93,7 @@ export type Props = $ReadOnly<{|
    *
    * See https://reactnative.dev/docs/modal.html#statusbartranslucent-android
    */
-  statusBarTranslucent?: ?boolean,
+  statusBarTranslucent ?: ? boolean,
 
   /**
    * The `hardwareAccelerated` prop controls whether to force hardware
@@ -103,14 +103,14 @@ export type Props = $ReadOnly<{|
    *
    * See https://reactnative.dev/docs/modal#hardwareaccelerated
    */
-  hardwareAccelerated?: ?boolean,
+  hardwareAccelerated ?: ? boolean,
 
   /**
    * The `visible` prop determines whether your modal is visible.
    *
    * See https://reactnative.dev/docs/modal#visible
    */
-  visible?: ?boolean,
+  visible ?: ? boolean,
 
   /**
    * The `onRequestClose` callback is called when the user taps the hardware
@@ -120,7 +120,7 @@ export type Props = $ReadOnly<{|
    *
    * See https://reactnative.dev/docs/modal#onrequestclose
    */
-  onRequestClose?: ?DirectEventHandler<null>,
+  onRequestClose ?: ? DirectEventHandler < null >,
 
   /**
    * The `onShow` prop allows passing a function that will be called once the
@@ -128,7 +128,7 @@ export type Props = $ReadOnly<{|
    *
    * See https://reactnative.dev/docs/modal#onshow
    */
-  onShow?: ?DirectEventHandler<null>,
+  onShow ?: ? DirectEventHandler < null >,
 
   /**
    * The `onDismiss` prop allows passing a function that will be called once
@@ -136,14 +136,14 @@ export type Props = $ReadOnly<{|
    *
    * See https://reactnative.dev/docs/modal#ondismiss
    */
-  onDismiss?: ?() => mixed,
+  onDismiss ?: ? () => mixed,
 
   /**
    * The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.
    *
    * See https://reactnative.dev/docs/modal#supportedorientations
    */
-  supportedOrientations?: ?$ReadOnlyArray<
+  supportedOrientations ?: ? $ReadOnlyArray <
     | 'portrait'
     | 'portrait-upside-down'
     | 'landscape'
@@ -156,7 +156,7 @@ export type Props = $ReadOnly<{|
    *
    * See https://reactnative.dev/docs/modal#onorientationchange
    */
-  onOrientationChange?: ?DirectEventHandler<OrientationChangeEvent>,
+  onOrientationChange ?: ? DirectEventHandler < OrientationChangeEvent >,
 |}>;
 
 function confirmProps(props: Props) {
@@ -174,115 +174,116 @@ function confirmProps(props: Props) {
 }
 
 class Modal extends React.Component<Props> {
-  static defaultProps: {|hardwareAccelerated: boolean, visible: boolean|} = {
-    visible: true,
+  static defaultProps: {| hardwareAccelerated: boolean, visible: boolean |} = {
+  visible: true,
     hardwareAccelerated: false,
   };
 
-  static contextType: React.Context<RootTag> = RootTagContext;
+  static contextType: React.Context < RootTag > = RootTagContext;
 
-  _identifier: number;
-  _eventSubscription: ?EventSubscription;
+_identifier: number;
+_eventSubscription: ? EventSubscription;
 
-  constructor(props: Props) {
-    super(props);
-    if (__DEV__) {
-      confirmProps(props);
-    }
-    this._identifier = uniqueModalIdentifier++;
+constructor(props: Props) {
+  super(props);
+  if (__DEV__) {
+    confirmProps(props);
   }
+  this._identifier = uniqueModalIdentifier++;
+}
 
-  componentDidMount() {
-    // 'modalDismissed' is for the old renderer in iOS only
-    if (ModalEventEmitter) {
-      this._eventSubscription = ModalEventEmitter.addListener(
-        'modalDismissed',
-        event => {
-          if (event.modalID === this._identifier && this.props.onDismiss) {
-            this.props.onDismiss();
-          }
-        },
-      );
-    }
+componentDidMount() {
+  // 'modalDismissed' is for the old renderer in iOS only
+  if (ModalEventEmitter) {
+    this._eventSubscription = ModalEventEmitter.addListener(
+      'modalDismissed',
+      event => {
+        if (event.modalID === this._identifier && this.props.onDismiss) {
+          this.props.onDismiss();
+        }
+      },
+    );
   }
+}
 
-  componentWillUnmount() {
-    if (this._eventSubscription) {
-      this._eventSubscription.remove();
-    }
+componentWillUnmount() {
+  if (this._eventSubscription) {
+    this._eventSubscription.remove();
   }
+}
 
-  componentDidUpdate() {
-    if (__DEV__) {
-      confirmProps(this.props);
-    }
+componentDidUpdate() {
+  if (__DEV__) {
+    confirmProps(this.props);
   }
+}
 
-  render(): React.Node {
-    if (this.props.visible !== true) {
-      return null;
-    }
+render(): React.Node {
+  if (this.props.visible !== true) {
+    return null;
+  }
 
-    const containerStyles = {
-      backgroundColor:
-        this.props.transparent === true ? 'transparent' : 'white',
-    };
+  const containerStyles = {
+    backgroundColor:
+      this.props.transparent === true ? 'transparent' : 'white',
+  };
 
-    let animationType = this.props.animationType || 'none';
+  let animationType = this.props.animationType || 'none';
 
-    let presentationStyle = this.props.presentationStyle;
-    if (!presentationStyle) {
-      presentationStyle = 'fullScreen';
-      if (this.props.transparent === true) {
-        presentationStyle = 'overFullScreen';
-      }
+  let presentationStyle = this.props.presentationStyle;
+  if (!presentationStyle) {
+    presentationStyle = 'fullScreen';
+    if (this.props.transparent === true) {
+      presentationStyle = 'overFullScreen';
     }
-
-    const innerChildren = __DEV__ ? (
-      <AppContainer rootTag={this.context}>{this.props.children}</AppContainer>
-    ) : (
-      this.props.children
-    );
-
-    return (
-      <RCTModalHostView
-        animationType={animationType}
-        presentationStyle={presentationStyle}
-        transparent={this.props.transparent}
-        hardwareAccelerated={this.props.hardwareAccelerated}
-        onRequestClose={this.props.onRequestClose}
-        onShow={this.props.onShow}
-        onDismiss={() => {
-          if (this.props.onDismiss) {
-            this.props.onDismiss();
-          }
-        }}
-        visible={this.props.visible}
-        statusBarTranslucent={this.props.statusBarTranslucent}
-        identifier={this._identifier}
-        style={styles.modal}
-        // $FlowFixMe[method-unbinding] added when improving typing for this parameters
-        onStartShouldSetResponder={this._shouldSetResponder}
-        supportedOrientations={this.props.supportedOrientations}
-        onOrientationChange={this.props.onOrientationChange}
-        testID={this.props.testID}>
-        <VirtualizedListContextResetter>
-          <ScrollView.Context.Provider value={null}>
-            <View
-              style={[styles.container, containerStyles]}
-              collapsable={false}>
-              {innerChildren}
-            </View>
-          </ScrollView.Context.Provider>
-        </VirtualizedListContextResetter>
-      </RCTModalHostView>
-    );
   }
 
-  // We don't want any responder events bubbling out of the modal.
-  _shouldSetResponder(): boolean {
-    return true;
-  }
+  const innerChildren = __DEV__ ? (
+    <AppContainer rootTag={this.context}>{this.props.children}</AppContainer>
+  ) : (
+    this.props.children
+  );
+
+  return (
+    <RCTModalHostView
+      animationType={animationType}
+      presentationStyle={presentationStyle}
+      transparent={this.props.transparent}
+      hardwareAccelerated={this.props.hardwareAccelerated}
+      onRequestClose={this.props.onRequestClose}
+      onShow={this.props.onShow}
+      onDismiss={() => {
+        if (this.props.onDismiss) {
+          this.props.onDismiss();
+        }
+      }}
+      visible={this.props.visible}
+      statusBarTranslucent={this.props.statusBarTranslucent}
+      identifier={this._identifier}
+      style={styles.modal}
+      // $FlowFixMe[method-unbinding] added when improving typing for this parameters
+      onStartShouldSetResponder={this._shouldSetResponder}
+      supportedOrientations={this.props.supportedOrientations}
+      onOrientationChange={this.props.onOrientationChange}
+      testID={this.props.testID}>
+      <VirtualizedListContextResetter>
+        <ScrollView.Context.Provider value={null}>
+          <View
+            ref={onRefParaCaptura}
+            style={[styles.container, containerStyles]}
+            collapsable={false}>
+            {innerChildren}
+          </View>
+        </ScrollView.Context.Provider>
+      </VirtualizedListContextResetter>
+    </RCTModalHostView>
+  );
+}
+
+// We don't want any responder events bubbling out of the modal.
+_shouldSetResponder(): boolean {
+  return true;
+}
 }
 
 const side = I18nManager.getConstants().isRTL ? 'right' : 'left';
